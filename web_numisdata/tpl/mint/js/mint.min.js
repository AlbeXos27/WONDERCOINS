"use strict";var mint={section_id:null,export_data_container:null,row_detail:null,map_container:null,map:null,set_up:async function(options){const self=this;self.export_data_container=options.export_data_container,self.row_detail=options.row_detail,self.section_id=options.section_id,self.map_container=options.map_container,self.map=null;const export_data_buttons=page.render_export_data_buttons();self.export_data_container.appendChild(export_data_buttons),self.export_data_container.classList.add("hide");const contact_form_button=page.create_suggestions_button();return self.export_data_container.appendChild(contact_form_button),self.section_id?self.get_row_data({section_id:self.section_id}).then((async function(response){console.log("--\x3e set_up get_row_data API response:",response.result);const mint=response.result.find(el=>"mint"===el.id),mint_data=page.parse_mint_data(mint.result[0]);self.draw_row({target:self.row_detail,ar_rows:[mint_data]});const map_fact=new map_factory;let resultado={hallazgos:{datos:[]},cecas:{datos:[]},complejos:{datos:[]}};const hallazgos=await self.get_findspots_points(mint_data.relations_types);resultado.hallazgos.datos=hallazgos.result,resultado.cecas.datos.push(mint_data),console.log(resultado);const map=map_fact.init({map_container:map_container,map_position:mint_data.map,source_maps:page.maps_config.source_maps,result:resultado,unique:!0}),mint_catalog=response.result.find(el=>"mint_catalog"===el.id);if(mint_catalog.result){const _mint_catalog=mint_catalog.result.find(el=>"mints"===el.term_table);_mint_catalog&&_mint_catalog.section_id?self.get_types_data2({section_id:_mint_catalog.section_id}).then((async function(result){for(let i=0;i<result.length;i++)result[i].catalog_info=result[i].term_section_id;const types_node=await self.draw_types2({ar_rows:result,mint_section_id:_mint_catalog.section_id});if(types_node){const target=document.getElementById("types");target.appendChild(types_node),page.activate_images_gallery(target)}})):(console.warn("Ignored invalid _mint_catalog:",_mint_catalog),console.warn("mint_catalog:",mint_catalog))}event_manager.publish("data_request_done",{request_body:null,result:{mint:mint.result,mint_catalog:mint_catalog.result},export_data_parser:page.export_parse_mint_data}),self.export_data_container.classList.remove("hide")})):self.row_detail.innerHTML="Error. Invalid section_id",!0},get_row_data:function(options){const section_id=options.section_id,ar_calls=[];ar_calls.push({id:"mint",options:{dedalo_get:"records",table:"mints",db_name:page_globals.WEB_DB,lang:page_globals.WEB_CURRENT_LANG_CODE,ar_fields:["section_id","lang","name","place_data","place","public_info","bibliography_data","map","uri","indexation","indexation_data","georef_geojson","relations_types","authorship_data","authorship_names","authorship_surnames","authorship_roles"],sql_filter:"section_id = "+parseInt(section_id),count:!1,resolve_portals_custom:{bibliography_data:"bibliographic_references"}}}),ar_calls.push({id:"mint_catalog",options:{dedalo_get:"records",table:"catalog",db_name:page_globals.WEB_DB,lang:page_globals.WEB_CURRENT_LANG_CODE,ar_fields:["section_id","term","term_table"],count:!1,limit:0,sql_filter:"term_data='[\""+parseInt(section_id)+"\"]'"}}),ar_calls.push({id:"mint_types",options:{dedalo_get:"records",table:"types",db_name:page_globals.WEB_DB,lang:page_globals.WEB_CURRENT_LANG_CODE,ar_fields:["*"],count:!1,limit:0,sql_filter:"mint_data='[\""+parseInt(section_id)+"\"]'"}}),ar_calls.push({id:"mint_coins",options:{dedalo_get:"records",table:"coins",db_name:page_globals.WEB_DB,lang:page_globals.WEB_CURRENT_LANG_CODE,ar_fields:["*"],count:!1,limit:0,sql_filter:"mint_data='[\""+parseInt(section_id)+"\"]'"}});const js_promise=data_manager.request({body:{dedalo_get:"combi",ar_calls:ar_calls}});return js_promise},get_types_data2:function(options){const section_id=options.section_id;return new Promise((function(resolve){const request_body={dedalo_get:"records",table:"catalog",ar_fields:["*"],lang:page_globals.WEB_CURRENT_LANG_CODE,sql_filter:"section_id = "+parseInt(section_id),limit:0,group:null,count:!1,order:"norder ASC",resolve_portals_custom:{term_data:"types"},process_result:{fn:"process_result::add_parents_and_children_recursive",columns:[{name:"parents"}]}};data_manager.request({body:request_body}).then((function(response){const parsed_data=response.result?page.parse_catalog_data(response.result):null;resolve(parsed_data)}))}))},draw_types2:async function(options){const ar_rows=options.ar_rows,mint_section_id=options.mint_section_id,fragment=new DocumentFragment,typesLabel=tstring.coin_production||"Coin production",lineSeparator=common.create_dom_element({element_type:"div",class_name:"info_line separator",parent:fragment});common.create_dom_element({element_type:"label",class_name:"big_label",text_content:typesLabel,parent:lineSeparator});const ar_nodes=[];for(let i=0;i<ar_rows.length;i++){const row=ar_rows[i];if(row.section_id==mint_section_id)continue;const is_mint_child=!!row.parents&&row.parents.find(el=>el==mint_section_id);if(!is_mint_child){console.log("Excluded row:",row);continue}const node=await mint_row.draw_type_item(row);node&&(ar_nodes.push(node),fragment.appendChild(node))}for(let i=0;i<ar_nodes.length;i++){const node=ar_nodes[i];if(node.parent){const parent_node=ar_nodes.find((function(el){return el.section_id==node.parent}));parent_node&&parent_node.container&&parent_node.container.appendChild(node)}else console.warn("node without parent:",node)}return fragment},draw_row:function(options){const row_object=void 0!==options.ar_rows[0]?options.ar_rows[0]:null,container=options.target;if(!row_object)return console.warn("Warning! draw_row row_object no found in options"),null;for(self.row_object=row_object,SHOW_DEBUG;container.hasChildNodes();)container.removeChild(container.lastChild);const fragment=new DocumentFragment,line=common.create_dom_element({element_type:"div",class_name:"",parent:fragment});if(!0===dedalo_logged){const link=common.create_dom_element({element_type:"a",class_name:"section_id go_to_dedalo",text_content:row_object.section_id,href:"/dedalo/lib/dedalo/main/?t=numisdata6&id="+row_object.section_id,parent:line});link.setAttribute("target","_blank")}const golden_separator=document.querySelector(".golden-separator");if(row_object.name&&row_object.name.length>0){const lineTittleWrap=common.create_dom_element({element_type:"div",class_name:"line-tittle-wrap",parent:line}),name=row_object.name;if(common.create_dom_element({element_type:"div",class_name:"line-tittle golden-color",text_content:name,parent:lineTittleWrap}),row_object.place&&row_object.place.length>0){const place="| "+row_object.place;common.create_dom_element({element_type:"div",class_name:"info_value",text_content:place,parent:lineTittleWrap})}if(row_object.authorship_names&&row_object.authorship_names.length>0){const ar_names=row_object.authorship_names.split("|"),ar_surnames=row_object.authorship_surnames.split("|"),ar_roles=row_object.authorship_roles.split("|"),authorship_length=ar_names.length;for(let i=0;i<authorship_length;i++){const name=ar_names[i].trim().toUpperCase(),surname=ar_surnames[i].trim().toUpperCase(),rol=ar_roles[i].trim(),authorship=name+" "+surname+" | "+rol;common.create_dom_element({element_type:"div",class_name:"authorship",text_content:authorship,parent:lineTittleWrap})}}}const comments_wrap=common.create_dom_element({element_type:"div",class_name:"block-expandable",parent:line});let block_text_length=0;if(row_object.public_info&&row_object.public_info.length>0){const public_info=row_object.public_info;block_text_length+=public_info.length;const public_info_block=common.create_dom_element({element_type:"div",class_name:"info_text_block",inner_html:public_info,parent:comments_wrap})}if(block_text_length>220&&page.create_expandable_block(comments_wrap,line),row_object.bibliography_data&&row_object.bibliography_data.length>0){const lineSeparator=common.create_dom_element({element_type:"div",class_name:"info_line separator",parent:line});common.create_dom_element({element_type:"label",class_name:"big_label",text_content:tstring.bibliographic_references||"Bibliographic references",parent:lineSeparator});const bibliography_block=common.create_dom_element({element_type:"div",class_name:"info_text_block",parent:line}),ref_biblio=row_object.bibliography_data,ref_biblio_length=ref_biblio.length;for(let i=0;i<ref_biblio_length;i++){const biblio_row_node=biblio_row_fields.render_row_bibliography(ref_biblio[i]),biblio_row_wrapper=common.create_dom_element({element_type:"div",class_name:"bibliographic_reference",parent:bibliography_block});biblio_row_wrapper.appendChild(biblio_row_node)}page.create_expandable_block(bibliography_block,line)}if(row_object.uri&&row_object.uri.length>0)for(let i=0;i<row_object.uri.length;i++){const el=row_object.uri[i],label=el.label||"URI",uri_text='<a class="icon_link info_value" href="'+el.value+'" target="_blank"> '+el.label+"</a>";common.create_dom_element({element_type:"span",inner_html:uri_text,parent:line})}return container.appendChild(fragment),container},get_findspot_hoards:function(data){const types=data.types,ar_filter=[];for(let i=types.length-1;i>=0;i--){const current_coin=types[i];ar_filter.push("types like '%\""+current_coin+"\"%'")}const sql_filter="("+ar_filter.join(" OR ")+")",ar_calls=[];ar_calls.push({id:"findspots",options:{dedalo_get:"records",table:"findspots",db_name:page_globals.WEB_DB,lang:page_globals.WEB_CURRENT_LANG_CODE,ar_fields:["*"],count:!1,sql_filter:sql_filter}}),ar_calls.push({id:"hoards",options:{dedalo_get:"records",table:"hoards",db_name:page_globals.WEB_DB,lang:page_globals.WEB_CURRENT_LANG_CODE,ar_fields:["*"],count:!1,sql_filter:sql_filter}});const js_promise=data_manager.request({body:{dedalo_get:"combi",ar_calls:ar_calls}});return js_promise},map_data:function(data,popup_data){const markerIcon=function(){switch(popup_data.type){case"findspot":return page.maps_config.markers.findspot;case"hoard":return page.maps_config.markers.hoard;default:return page.maps_config.markers.mint}}();console.log("Obejto popup_data: ",popup_data);const ar_data=Array.isArray(data)?data:[data],map_points=[];for(let i=0;i<ar_data.length;i++){const geojson=[ar_data[i]],item={lat:null,lon:null,geojson:geojson,marker_icon:markerIcon,data:popup_data};map_points.push(item)}return map_points},get_findspots_points:async function(types){let sql_filter="";for(let index=0;index<types.length;index++)sql_filter+=index!=types.length-1?`JSON_CONTAINS(types, '"${types[index]}"') OR `:`JSON_CONTAINS(types, '"${types[index]}"')`;try{const hijos=await data_manager.request({body:{dedalo_get:"records",table:"findspots",ar_fields:["*"],sql_filter:sql_filter,limit:0,count:!0,offset:0,order:"section_id ASC",process_result:null}});return hijos}catch(error){console.error("Error cargando datos:",error)}}};